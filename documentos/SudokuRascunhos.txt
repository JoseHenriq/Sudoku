

    /*
    //--- trataCelTocada em Números disponíveis
    private fun trataCelNumsDisp(xEvent : Int) {

        val x = xEvent

        //--- Coordenada X e valor da célula tocada
        val intCol = x / intCellwidth
        val intNum = intCol + 1
        val intQtidd = arIntNumsDisp[intNum - 1]
        strLog = "-> Celula tocada em NumDisp: coluna = $intCol, qtidd = $intQtidd"
        Log.d(cTAG, strLog)

    }

    //--- inflateIVNumDisp
    /*
    private fun inflateIVNumDisp() {

        val layout   = findViewById<LinearLayout>(R.id.loImageViewNumDisp)
        val inflater = LayoutInflater.from(this)

        ivNumDisp = (inflater.inflate(R.layout.inflate_ivnumdisp, layout, false)
                                                                                      as ImageView)
        layout.addView(ivNumDisp)

    }
     */

    //--- desInflateIVNumDisp
    private fun desInflateIVNumDisp() {

        val layout = findViewById<LinearLayout>(R.id.loImageViewNumDisp)
        layout.removeAllViews()

    }

    /*
    fun ivNumDisp3Click (view: View?) {

        Toast.makeText(
            this, "Clicou no imageview dos NumDisps!",
            Toast.LENGTH_SHORT
        ).show()

    }
    */

        /*
        try {

            canvasMyImage?.setBitmap(bmpMyImage!!)

        } catch (exc: Exception) {
            Log.d(cTAG, "Erro: ${exc.message}")
        }
         */

                /*
                if (intNum > 0) {
                    flagJoga = false    // Não quer jogar; só quer analisar ...
                    intLinJogar = 0
                    intColJogar = 0
                    //-------------------------
                    mostraNumsIguais(intNum)
                    //-------------------------
                }
                //--- Se não contiver um número, quer jogar
                else {
                    flagJoga = true     // Vamos ao jogo!
                    intLinJogar = intLinha
                    intColJogar = intCol
                    //------------------------------------------
                    mostraCelAJogar(intLinJogar, intColJogar)
                    //------------------------------------------
                }
                */


            // txtDadosJogo.append(sgg.txtDados)


        //--- Image view dos números disponíveis
        /*
        //-------------------
        preparaIVNumDisp()
        //-------------------
        */

        /*
        ivNumDisp.setOnTouchListener { _, event ->

            //--- Coordenada X do numsDisps tocada
            val xEvent = event.x.toInt()

            //-----------------------
            trataCelTocada(xEvent)
            //-----------------------

            false

        }
        */

        /*
        ivNumDisp.setOnTouchListener(OnTouchListener { v, event ->

            Log.d(cTAG, "-> onTouch do ivNumDisp!")

            false })
        */

        /*

            /*
                val flagJoga = false

                //--- Só transfere o número para o board se estiver jogando
                if (flagJoga) {

                    //--- Coordenada X do numsDisps tocada
                    val x = event.x.toInt()

                    //--- Coordenada X e valor da célula tocada
                    val intCol = x / intCellwidth
                    val intNum = intCol + 1
                    val intQtidd = arIntNumsDisp[intNum - 1]

                    /*
                    //strLog = "-> Celula tocada em NumDisp: coluna = " + intCol +
                    //        ", qtidd = " + intQtidd
                    //Log.d(cTAG, strLog)

                    //--- Verifica se ainda tem desse número para jogar e se esse número é válido.
                    var flagNumValido: Boolean
                    if (intQtidd > 0) {

                        //--- Verifica se num válido
                        // Determina a que Qm o número pertence
                        //----------------------------------------------------------
                        val intQuadMenor = determinaQm(intLinJogar, intColJogar)
                        //----------------------------------------------------------

                        //Log.d(
                        //    cTAG, "-> linhaJogar= " + intLinJogar + " colJogar= " +
                        //            intColJogar + " Qm = " + intQuadMenor )

                        // Verifica se esse número ainda não existe no seu Qm e nem no seu QM
                        //------------------------------------------------------------------------------
                        flagNumValido =
                            verifValidade(intQuadMenor, intLinJogar, intColJogar, intNum)
                        //------------------------------------------------------------------------------
                        if (!flagNumValido) {

                            //strLog = "-> Número NÃO válido (linha, coluna ou quadro); NÃO será incluído" +
                            //        " no Sudoku board."
                            //Log.d(cTAG, strLog)

                            strToast = "Número NÃO Ok (linha, coluna ou quadro)"
                            //-----------------------------------------------------------------
                            Toast.makeText(this, strToast, Toast.LENGTH_SHORT).show()
                            //-----------------------------------------------------------------

                        }
                        // Verifica se esse número, nessa célula, é o mesmo do gabarito
                        else {

                            //--- Número diferente do num do gabarito
                            if (intNum != arArIntGab[intLinJogar][intColJogar]) {

                                flagNumValido = false

                                //strLog = "-> Número NÃO válido (gab); NÃO será incluído" +
                                //         " no Sudoku board."
                                //Log.d(cTAG, strLog)

                                strToast = "Número NÃO Ok (gabarito)"
                                //-----------------------------------------------------------------
                                Toast.makeText(this, strToast, Toast.LENGTH_SHORT).show()
                                //-----------------------------------------------------------------

                            }
                            //--- Número OK qto ao gabarito
                            else {

                                //Log.d(cTAG, "-> Número válido; será incluído no Sudoku board.")

                                //strToast = "Número Ok!"
                                //----------------------------------------------------------------
                                //Toast.makeText(this, strToast, Toast.LENGTH_LONG).show()
                                //----------------------------------------------------------------

                                //--- Atualiza o Sudoku board
                                //----------------------------------------------------------------------
                                pintaCelula(intLinJogar, intColJogar, pincelBranco)
                                //----------------------------------------------------------------------
                                escreveCelula(
                                    intLinJogar,
                                    intColJogar,
                                    intNum.toString(),
                                    pincelAzul
                                )
                                //----------------------------------------------------------------------
                                desenhaSudokuBoard(false)
                                //-----------------------------------
                                preencheJogo()
                                //---------------

                                //--- Salva esse bitmap
                                //--------------------------------------
                                copiaBmpByBuffer(bmpMyImage, bmpJogo)
                                //--------------------------------------

                                //--- Atualiza a base de dados
                                arArIntNums[intLinJogar][intColJogar] = intNum
                                arIntNumsDisp[intNum - 1]--

                                //--- Atualiza a qtidd disponível para esse número
                                //-------------------
                                atualizaNumDisp()
                                //-------------------

                                //--- Destaca os números iguais a esse já jogados
                                //--------------------------
                                mostraNumsIguais(intNum)
                                //--------------------------

                                flagJoga = false

                            }
                        }

                        if (!flagNumValido) {
                            tvErros!!.text = "${++intContaErro}"
                        }

                    }

                    //--- Verifica se fim de jogo (todas as qtidds foram zeradas
                    var flagContJogo = false
                    for (idxVetorNumDisp in 0..8) {

                        if (arIntNumsDisp[idxVetorNumDisp] > 0) flagContJogo = true

                    }
                    //--- Se já foram utilizados todos os números disponíveis, pára o cronometro
                    if (!flagContJogo) {

                        Log.d(cTAG, "-> ${crono.text} - Fim")

                        crono.stop()
                        flagJoga = false

                        btnInicia.text = strInicia
                        btnInicia.isEnabled = false

                    }
                }
                */

                }

             */

            false

        }
        */

