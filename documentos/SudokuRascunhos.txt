

//--------------------------------------------------------------------------
27/12/21 07:00:00
//--------------------------------------------------------------------------

package br.com.jhconsultores.sudoku.adapter

import android.annotation.SuppressLint
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

import br.com.jhconsultores.sudoku.R

class JogoAdapter(private val arStrItemsListArq  : ArrayList<String>,
                  private val arStrItemsListJogo : ArrayList<String>,
                  private val listener : JogoClickedListener) :
                                                          RecyclerView.Adapter<JogosViewHolder>() {

//class JogoAdapter(private val listener : JogoClickedListener) : RecyclerView.Adapter<JogosViewHolder>() {

    //--------------------------------------------------------------------------
    // Instancializações e inicializações
    //--------------------------------------------------------------------------
    private val cTAG = "Sudoku"

//    lateinit var arStrItemsListArq  : ArrayList<String>
//    lateinit var arStrItemsListJogo : ArrayList<String>

    //--------------------------------------------------------------------------
    // Eventos
    //--------------------------------------------------------------------------
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): JogosViewHolder {

        val view = LayoutInflater.from(parent.context)
                                            .inflate(R.layout.jogos_item, parent, false)
        return JogosViewHolder(view)

    }

    @SuppressLint("ResourceAsColor")
    override fun onBindViewHolder(holder: JogosViewHolder, position: Int) {

        holder.arqTxt.text  = arStrItemsListArq [position]
        holder.jogoTxt.text = arStrItemsListJogo[position]

        val strDado    = arStrItemsListArq [position]
        val intIdxInic = strDado.indexOf("Status: ") + 8
        val strStatus  = strDado.substring(intIdxInic)

        val cardColor : Long = if (strStatus.contains("ativo")) 0xFFA5F55C else 0xFF3D91E4

        holder.arqTxt.setBackgroundColor  (cardColor.toInt())
        holder.jogoTxt.setBackgroundColor (cardColor.toInt())


        //--- Atende o tap num ítem e chama o respectivo listener
        holder.arqTxt.setOnClickListener {

            Log.d(cTAG, "-> arqTxt - posição: $position")

            //----------------------------
            listener.infoItem(position)
            //----------------------------

        }

        //--- Atende o tap num ítem e chama o respectivo listener
        holder.jogoTxt.setOnClickListener {

            Log.d(cTAG, "-> jogoTxt - posição: $position")

            //----------------------------
            listener.jogoItem(position)
            //----------------------------

        }

    }

    //----------------------------------------------------------------------------------------------
    // Funções
    //----------------------------------------------------------------------------------------------
    override fun getItemCount(): Int {

        Log.d(cTAG, "   - ítemsJogo = ${arStrItemsListArq.size}")
        return (arStrItemsListArq.size)

    }

}

//------------------------------------------------------------------------------
// Classe interna
//------------------------------------------------------------------------------
class JogosViewHolder(itemView: View): RecyclerView.ViewHolder(itemView) {

    val arqTxt  : TextView = itemView.findViewById(R.id.card_Arq_txt)
    val jogoTxt : TextView = itemView.findViewById(R.id.card_Jogo_txt)

}


















package br.com.jhconsultores.sudoku.adapter

import android.annotation.SuppressLint
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

import br.com.jhconsultores.sudoku.R

class JogoAdapter (private val listener : JogoClickedListener) :
                                             RecyclerView.Adapter<JogoAdapter.JogosViewHolder>()  {

    //--------------------------------------------------------------------------
    // Instancializações e inicializações
    //--------------------------------------------------------------------------
    private val cTAG = "Sudoku"

    lateinit var arStrItemsListArq  : ArrayList<String>
    lateinit var arStrItemsListJogo : ArrayList<String>

    //------------------------------------------------------------------------------
    // Métodos da Classe JogoAdapter
    //------------------------------------------------------------------------------
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): JogosViewHolder {

//        val inflatedView = parent.inflate(R.layout.jogos_item, false)
//        return JogosViewHolder(inflatedView)

        val view = LayoutInflater.from(parent.context)
                                            .inflate(R.layout.jogos_item, parent, false)
        return JogosViewHolder(view)

    }

    override fun onBindViewHolder(holder: JogosViewHolder, position: Int) {

        holder.arqTxt.text  = arStrItemsListArq [position]
        holder.jogoTxt.text = arStrItemsListJogo[position]

        val strDado    = arStrItemsListArq [position]
        val intIdxInic = strDado.indexOf("Status: ") + 8
        val strStatus  = strDado.substring(intIdxInic)

        val cardColor : Long = if (strStatus.contains("ativo")) 0xFFA5F55C else 0xFF3D91E4

        holder.arqTxt.setBackgroundColor  (cardColor.toInt())
        holder.jogoTxt.setBackgroundColor (cardColor.toInt())

        //--- Atende o tap num ítem e chama o respectivo listener
        holder.arqTxt.setOnClickListener {

            Log.d(cTAG, "-> arqTxt - posição: $position")

            //----------------------------
            listener.infoItem(position)
            //----------------------------

        }

        //--- Atende o tap num ítem e chama o respectivo listener
        holder.jogoTxt.setOnClickListener {

            Log.d(cTAG, "-> jogoTxt - posição: $position")

            //----------------------------
            listener.jogoItem(position)
            //----------------------------

        }

    }

    override fun getItemCount() = arStrItemsListArq.size

    //------------------------------------------------------------------------------
    // Classe interna
    //------------------------------------------------------------------------------
    /*
    class JogosViewHolder(itemView: View): RecyclerView.ViewHolder(itemView), View.OnClickListener {

        private var view: View    = itemView
        private var jogo: String? = null

        //3
        init {

            itemView.setOnClickListener(this)

        }

        //4
        override fun onClick(v: View) {

            Log.d("cTAG", "CLICK!")

        }

        companion object {
            //5
            private val JOGO_KEY = "JOGO"
        }

        val arqTxt  : TextView = itemView.findViewById(R.id.card_Arq_txt)
        val jogoTxt : TextView = itemView.findViewById(R.id.card_Jogo_txt)

    }
    */
}




----------------------------------------------------------------------------------------------------------------------------------

        /*
        val strFileName = "download/sudoku/preset.xml" //""./res/raw/preset.xml"   // "./input/preset.xml"   //"./src/main/res/raw/preset.xml"
        try {
            //--------------------------------------------
            document = readXml(strFileName)
            //--------------------------------------------
        } catch (exc : Exception) {

            Log.d(cTAG, "Erro: ${exc.message}")

        }
         */

        val projectDirAbsolutePath = Paths.get("").toAbsolutePath().toString()
        val resourcesPath = Paths.get(projectDirAbsolutePath, "/src/main/resources")            .filter { item -> item.toString().endsWith(".xml") }
            val paths         = Files.walk(resourcesPath)
            .filter  { item -> Files.isRegularFile(item) }
            .forEach { item -> Log.d(cTAG, "filename: $item") }

            //.filter { item -> item.toString().endsWith(".xml") }

            /*
            val dir = File( object {}.javaClass.getResource("preset.xml").file)   //"/src/main/resources").file )

            dir.walk().forEach { f ->
                if(f.isFile) {
                    //println("file ${f.name}")
                    Log.d(cTAG, "file ${f.name}")
                } else {
                    //println("dir ${f.name}")
                    Log.d(cTAG, "Dir ${f.name}")
                }
            }
*/




        OnTouchListener MyOnTouchListener = new OnTouchListener()
        {
            @Override
            public boolean onTouch (View v, MotionEvent event)
            {
                switch(event.getAction() & MotionEvent.ACTION_MASK)
                {
                    case MotionEvent.ACTION_DOWN:
                    startTime = System.currentTimeMillis();
                    clickCount++;
                    break;
                    case MotionEvent.ACTION_UP:
                    long time = System.currentTimeMillis() - startTime;
                    duration=  duration + time;
                    if(clickCount == 2)
                    {
                        if(duration<= MAX_DURATION)
                        {
                            Toast.makeText(captureActivity.this, "double tap",Toast.LENGTH_LONG).show();
                        }
                        clickCount = 0;
                        duration = 0;
                        break;
                    }
                }
                return true;
            }
        }



import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;
import androidx.appcompat.app.AppCompatActivity;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    // declare editText
    EditText editText;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // definition of editText using method findViewById()
        editText = findViewById(R.id.edit_text);
        
        // initializing mSpeechRecognizer using SpeechRecognizer class
        final SpeechRecognizer mSpeechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
        final Intent mSpeechRecognizerIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        
        mSpeechRecognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        mSpeechRecognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        
        // various methods of RecognitionListener class
        mSpeechRecognizer.setRecognitionListener(new RecognitionListener() {
            @Override
            public void onReadyForSpeech(Bundle bundle) {

            }

            @Override
            public void onBeginningOfSpeech() {

            }

            @Override
            public void onRmsChanged(float v) {

            }

            @Override
            public void onBufferReceived(byte[] bytes) {

            }

            @Override
            public void onEndOfSpeech() {

            }

            @Override
            public void onError(int i) {

            }

            @Override
            public void onResults(Bundle bundle) {
                
                // getting all the matches
                ArrayList<String> matches = bundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);

                // displaying the first match
                if (matches != null)
                    editText.setText(matches.get(0));
            }

            @Override
            public void onPartialResults(Bundle bundle) {

            }

            @Override
            public void onEvent(int i, Bundle bundle) {

            }
        });
        
        // set OnTouchListener to imageView named microphone
        findViewById(R.id.microphone).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                switch (motionEvent.getAction()) {
                    
                    // case MotionEvent.ACTION_UP run when user will remove
                    // his/her finger from microphone imageView
                    case MotionEvent.ACTION_UP:
                        
                        mSpeechRecognizer.stopListening();
                        editText.setHint(" ");
                        break;

                    // case MotionEvent.ACTION_UP run when user will put his/her
                    // finger from microphone imageView
                    case MotionEvent.ACTION_DOWN:
                        
                        mSpeechRecognizer.startListening(mSpeechRecognizerIntent);
                        editText.setText("");
                        editText.setHint("");
                        break;
                }
                return false;
            }
        });
    }
}







    /*
    //--- trataCelTocada em Números disponíveis
    private fun trataCelNumsDisp(xEvent : Int) {

        val x = xEvent

        //--- Coordenada X e valor da célula tocada
        val intCol = x / intCellwidth
        val intNum = intCol + 1
        val intQtidd = arIntNumsDisp[intNum - 1]
        strLog = "-> Celula tocada em NumDisp: coluna = $intCol, qtidd = $intQtidd"
        Log.d(cTAG, strLog)

    }

    //--- inflateIVNumDisp
    /*
    private fun inflateIVNumDisp() {

        val layout   = findViewById<LinearLayout>(R.id.loImageViewNumDisp)
        val inflater = LayoutInflater.from(this)

        ivNumDisp = (inflater.inflate(R.layout.inflate_ivnumdisp, layout, false)
                                                                                      as ImageView)
        layout.addView(ivNumDisp)

    }
     */

    //--- desInflateIVNumDisp
    private fun desInflateIVNumDisp() {

        val layout = findViewById<LinearLayout>(R.id.loImageViewNumDisp)
        layout.removeAllViews()

    }

    /*
    fun ivNumDisp3Click (view: View?) {

        Toast.makeText(
            this, "Clicou no imageview dos NumDisps!",
            Toast.LENGTH_SHORT
        ).show()

    }
    */

        /*
        try {

            canvasMyImage?.setBitmap(bmpMyImage!!)

        } catch (exc: Exception) {
            Log.d(cTAG, "Erro: ${exc.message}")
        }
         */

                /*
                if (intNum > 0) {
                    flagJoga = false    // Não quer jogar; só quer analisar ...
                    intLinJogar = 0
                    intColJogar = 0
                    //-------------------------
                    mostraNumsIguais(intNum)
                    //-------------------------
                }
                //--- Se não contiver um número, quer jogar
                else {
                    flagJoga = true     // Vamos ao jogo!
                    intLinJogar = intLinha
                    intColJogar = intCol
                    //------------------------------------------
                    mostraCelAJogar(intLinJogar, intColJogar)
                    //------------------------------------------
                }
                */


            // txtDadosJogo.append(sgg.txtDados)


        //--- Image view dos números disponíveis
        /*
        //-------------------
        preparaIVNumDisp()
        //-------------------
        */

        /*
        ivNumDisp.setOnTouchListener { _, event ->

            //--- Coordenada X do numsDisps tocada
            val xEvent = event.x.toInt()

            //-----------------------
            trataCelTocada(xEvent)
            //-----------------------

            false

        }
        */

        /*
        ivNumDisp.setOnTouchListener(OnTouchListener { v, event ->

            Log.d(cTAG, "-> onTouch do ivNumDisp!")

            false })
        */

        /*

            /*
                val flagJoga = false

                //--- Só transfere o número para o board se estiver jogando
                if (flagJoga) {

                    //--- Coordenada X do numsDisps tocada
                    val x = event.x.toInt()

                    //--- Coordenada X e valor da célula tocada
                    val intCol = x / intCellwidth
                    val intNum = intCol + 1
                    val intQtidd = arIntNumsDisp[intNum - 1]

                    /*
                    //strLog = "-> Celula tocada em NumDisp: coluna = " + intCol +
                    //        ", qtidd = " + intQtidd
                    //Log.d(cTAG, strLog)

                    //--- Verifica se ainda tem desse número para jogar e se esse número é válido.
                    var flagNumValido: Boolean
                    if (intQtidd > 0) {

                        //--- Verifica se num válido
                        // Determina a que Qm o número pertence
                        //----------------------------------------------------------
                        val intQuadMenor = determinaQm(intLinJogar, intColJogar)
                        //----------------------------------------------------------

                        //Log.d(
                        //    cTAG, "-> linhaJogar= " + intLinJogar + " colJogar= " +
                        //            intColJogar + " Qm = " + intQuadMenor )

                        // Verifica se esse número ainda não existe no seu Qm e nem no seu QM
                        //------------------------------------------------------------------------------
                        flagNumValido =
                            verifValidade(intQuadMenor, intLinJogar, intColJogar, intNum)
                        //------------------------------------------------------------------------------
                        if (!flagNumValido) {

                            //strLog = "-> Número NÃO válido (linha, coluna ou quadro); NÃO será incluído" +
                            //        " no Sudoku board."
                            //Log.d(cTAG, strLog)

                            strToast = "Número NÃO Ok (linha, coluna ou quadro)"
                            //-----------------------------------------------------------------
                            Toast.makeText(this, strToast, Toast.LENGTH_SHORT).show()
                            //-----------------------------------------------------------------

                        }
                        // Verifica se esse número, nessa célula, é o mesmo do gabarito
                        else {

                            //--- Número diferente do num do gabarito
                            if (intNum != arArIntGab[intLinJogar][intColJogar]) {

                                flagNumValido = false

                                //strLog = "-> Número NÃO válido (gab); NÃO será incluído" +
                                //         " no Sudoku board."
                                //Log.d(cTAG, strLog)

                                strToast = "Número NÃO Ok (gabarito)"
                                //-----------------------------------------------------------------
                                Toast.makeText(this, strToast, Toast.LENGTH_SHORT).show()
                                //-----------------------------------------------------------------

                            }
                            //--- Número OK qto ao gabarito
                            else {

                                //Log.d(cTAG, "-> Número válido; será incluído no Sudoku board.")

                                //strToast = "Número Ok!"
                                //----------------------------------------------------------------
                                //Toast.makeText(this, strToast, Toast.LENGTH_LONG).show()
                                //----------------------------------------------------------------

                                //--- Atualiza o Sudoku board
                                //----------------------------------------------------------------------
                                pintaCelula(intLinJogar, intColJogar, pincelBranco)
                                //----------------------------------------------------------------------
                                escreveCelula(
                                    intLinJogar,
                                    intColJogar,
                                    intNum.toString(),
                                    pincelAzul
                                )
                                //----------------------------------------------------------------------
                                desenhaSudokuBoard(false)
                                //-----------------------------------
                                preencheJogo()
                                //---------------

                                //--- Salva esse bitmap
                                //--------------------------------------
                                copiaBmpByBuffer(bmpMyImage, bmpJogo)
                                //--------------------------------------

                                //--- Atualiza a base de dados
                                arArIntNums[intLinJogar][intColJogar] = intNum
                                arIntNumsDisp[intNum - 1]--

                                //--- Atualiza a qtidd disponível para esse número
                                //-------------------
                                atualizaNumDisp()
                                //-------------------

                                //--- Destaca os números iguais a esse já jogados
                                //--------------------------
                                mostraNumsIguais(intNum)
                                //--------------------------

                                flagJoga = false

                            }
                        }

                        if (!flagNumValido) {
                            tvErros!!.text = "${++intContaErro}"
                        }

                    }

                    //--- Verifica se fim de jogo (todas as qtidds foram zeradas
                    var flagContJogo = false
                    for (idxVetorNumDisp in 0..8) {

                        if (arIntNumsDisp[idxVetorNumDisp] > 0) flagContJogo = true

                    }
                    //--- Se já foram utilizados todos os números disponíveis, pára o cronometro
                    if (!flagContJogo) {

                        Log.d(cTAG, "-> ${crono.text} - Fim")

                        crono.stop()
                        flagJoga = false

                        btnInicia.text = strInicia
                        btnInicia.isEnabled = false

                    }
                }
                */

                }

             */

            false

        }
        */

